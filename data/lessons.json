[
  {
    "id": 1,
    "course_id": 1,
    "title": "Intro",
    "content": "Before we start with the first topic, you should understand what awaits you on your journey into the knowledge of the Coderealm. \n \n Imagine you are building a house. First you build a shell - the walls, the floor. You can live in it, but it's not pretty or functional yet, so you'll probably lay wooden flooring and paint the walls - and what's a house without furniture? But now you still need electricity, heating and maybe even a whole smart home! Last but not least, there's a shed where you can store things. \n \n You might be wondering what this is all about. You wanted to create websites, SAVE THE CODEREALM and not build houses. Yes ... you will, but first understand what you will learn. A website is like this house you need a shell, which is the HTML. Then you can style this shell with CSS. You get the functionality with Javascript and you can compare the shed with the backend. \n \n I hope you now understand a little better what to expect. So let's get straight into the adventure ... \n\n",
    "example": ""
  },
  {
    "id": 2,
    "course_id": 1,
    "title": "HTML Basics",
    "content": "Let's start with the basics of the shell. HTML is an abbreviation for HyperText Markup Language.\n\n <strong>HyperText</strong> refers to the way in which Web pages are linked together. Thus, the link available on a webpage is called 'HyperText'. \n <strong>Markup Language</strong>, which means you use HTML to simple 'mark up' a text document with tags that tell a Web browser how to structure it to display. \n\n Each HTML file consists of: \n \n <strong>&lt;!DOCTYPE html&gt;</strong> – Tells the browser that this is an HTML5 document. \n <strong>&lt;html&gt; ... &lt;/html&gt;</strong> – The root element of the page. This includes all information that is to be processed by the browser. \n <strong>&lt;head&gt; ... &lt;/head&gt;</strong> – Contains meta information (not visible content), e.g. title, character encoding, fonts, little picture for the tab. \n <strong>&lt;title&gt; ... &lt;/title&gt;</strong> – Sets the title of the browser tab. \n <strong>&lt;body&gt; ... &lt;/body&gt;</strong> – Contains all visible content. \n \n Important! \n Every tag has an opening and a closing tag. That means everything which is between those tags belongs to them. Opening tags are <head> or <body>. They only contain the name of the tag. Closing tags always have a ‘/’ - </head> or </body>. Special cases are self-closing tags - but we will come to these later. \n\n",
    "example": "<!DOCTYPE html> \n <html> \n  <head> \n   <title> This is the title! </title> \n  </head> \n  <body> \n   Here is some text. \n  </body> \n </html>"
  },
  {
    "id": 3,
    "course_id": 1,
    "title": "Elements and tags",
    "content": "HTML elements are the basic building blocks to create a web page, created with an opening tag, content, and ending tag. \n\n <strong>What is an HTML element?</strong> \n\n An HTML element is a fundamental component of an HTML document that can contain data to display on the webpage, such as text, image, link, or sometimes nothing. An HTML element includes an opening tag, content, and a closing tag, where the opening tag may also include attributes. \n\n An HTML element includes: \n <strong>Opening Tag</strong> - An opening tag specifies the beginning of the element and may include multiple attributes. \n <strong>Content</strong> - The content part includes the information to be displayed or processed within an element. \n <strong>Closing Tag</strong> - A closing tag marks the end of the element (A closing tag may be optional for some elements). \n\n An HTML document consists of a tree of HTML elements, and they define the content and layout of a webpage, like how and what content should display in the different sections of a webpage. \n\n You can distinguish between two types of these elements: Block and inline elements. \n Here you will find an overview of the most common and important tags: \n \n <strong>Block elements</strong> always start on a new line, take up the full width of their parent element (elements in which they are located) and can contain other block and inline elements. \n <strong>Inline elements</strong> remain on the same line as the surrounding text, only take up as much space as they need and cannot contain block elements, only text or other inline elements. \n \n Common & important HTML Tags \n <strong>&lt;h1> to &lt;h6></strong> = Headings (from most to least important) \n <strong>&lt;p></strong> = Paragraph \n <strong>&lt;a href='url'></strong> = Link to another page or website \n <strong>&lt;img src='url' alt='text' /></strong> = Image \n <strong>&lt;ul>, &lt;ol>, &lt;li></strong> = Unordered list, ordered list, list item \n <strong>&lt;div></strong> = Generic container for layout/design \n <strong>&lt;span></strong> = Inline container for styling text \n <strong>&lt;strong>, &lt;em></strong> = Bold (strong) and italic (em) text \n <strong>&lt;br></strong> = Line break \n <strong>&lt;input>, &lt;form>, &lt;label>, &lt;button></strong> = Form elements \n <strong>&lt;table>, `&lt;r>, &lt;td>, &lt;th><7strong> = Table elements \n\n",
    "example": "<!DOCTYPE html> \n <html> \n  <head> \n   <title>This is the title!</title> \n  </head> \n  <body> \n   <h1> This is the first heading. </h1> \n   <p> This is a paragraph. </p> \n   <h2> This is the second heading, </h2> \n  </body> \n </html>"
  },
  {
    "id": 4,
    "course_id": 1,
    "title": "Attributes",
    "content": "We have seen a few HTML tags and their usage, like heading tags &lth1>, &lth2>, paragraph tags &ltp>, and other tags. We used them so far in their simplest form, but most of the HTML tags can also have attributes, which are extra bits of information. \n\n <strong>What are HTML Attributes?</strong> \n HTML attributes are special words that provide additional information to an HTML element. Attributes are placed inside the element's opening tag, and they are used to configure or adjust the element's behavior. All attributes are made up of two parts: a name and a value. \n\n <strong>Name</strong> - The attribute name is the keyword, also known as the attribute identifier, which defines a specific characteristic for the element in which it is using. For example, the paragraph &ltp> element (in the below-given example) has an attribute 'align', which defines the alignment of the paragraph on the page. \n <strong>Value</strong> The attribute value is the data or information that defines the value to be set for that attribute. The value is assigned within the double quotes. For example, 'left', 'center', or 'right' can be assigned to the 'align' attribute with the paragraph tag (as shown in the below example). \n\n <strong>Rules and Characteristics</strong> \n The following are the rules and characteristics of HTML attributes; you should follow while using attributes with HTML elements: \n\n <li> Attributes are optional; you can use them to provide additional information about an HTML element. \n <li> Attributes have name and value pairs, but some of the attributes do not require any value; those are known as Boolean attributes. \n <li> An HTML element can have multiple attributes, and they should be separa ted by spaces. \n <li> Attributes should always be written with the opening tag. \n <li> All HTML elements can have attributes except a few like &lthead>, &lttitle>, &ltscript>, etc. \n\n",
    "example": "<!DOCTYPE html> \n<html> \n\n<head> \n    <title>Example of HTML Attributes</title> \n</head> \n\n<body>\n    <p align='left'>Left Aligned</p> \n    <p align='center'>Center Aligned</p> \n    <p align='right'>Right Aligned</p>\n</body> \n\n</html>"
  },
  {
    "id": 5,
    "course_id": 1,
    "title": "Lists",
    "content": "HTML lists are group or collection of items. These items can be both organized and unorganized depending on the requirement. They help in organizing, structuring, and presenting information to make it more user-friendly, readable, and accessible. \n To display a list of information in HTML, we use various list tags like &ltul> or &ltol>. All lists must contain one or more list elements. In addition to the mentioned types of lists, there are some other important list-related elements and concepts that also contribute to effective document structuring. \n\n <strong>Unordered lists</strong> \n Unordered lists display lists of items that are not in a specific order. The unordered lists are marked with bullet points. To create an unordered list, the &ltul> tag is used along with the &ltli> tag. Here, the &ltli> tag specifies the list items. \n\n <strong>Ordered Lists</strong> \n Ordered lists are lists of items that are in a specific order. The ordered lists are marked with numbers by default; you can change the numbers into alphabets, roman numbers, etc. by using the type attribute or the CSS list-style-type property. \n To create an ordered list, the &ltol> tag is used along with the &ltli> tag, where &ltli> specifies the list items.\n\n",
    "example": "<!DOCTYPE html> \n<html> \n<head> \n   <title>HTML Lists</title> \n</head>\n<body> \n   <h2>Unordered list</h2> \n   <ul> \n      <li>HTML</li> \n      <li>CSS</li> \n      <li>JavaScript</li> \n      <li>Java</li> \n      <li>JavaFX</li> \n   </ul> \n\n   <h2>Example of HTML List</h2> \n   <ol> \n      <li>HTML</li> \n      <li>CSS</li> \n      <li>JavaScript</li> \n      <li>Java</li> \n      <li>JavaFX</li> \n   </ol> \n</body> \n</html>"
  },
  {
    "id": 6,
    "course_id": 1,
    "title": "Forms and Input",
    "content": "It's hard to believe, but forms can be found on the Internet more often than you might think. Every field in which you can enter something or boxes that you can check are part of forms. You already used one on your own when you registered with Coderealm. \n That's why it's important to know how to use them. \n\n Forms consist of a basic structure. This is the <strong>&lt;form></strong> tag - this consists of an opening and closing tag. All information about this form is written between the two tags. The first step is to define a <strong>&lt;label> ... &lt;/label></strong>. This is where you specify which heading or label the following field should have. This is displayed on the web page. \n  After the label comes the most exciting part of the form - now it becomes interactive with the user. This is the <strong>&lt;input ... /></strong>. Within the tag, you define the type, the id and the name. With the type you tell the browser what kind of input it can calculate with. Words, a mail address or numbers. The id and the name are interesting for the styling and the functionality - this comes in the later modules. \n \n Most important types: \n - text = one line text \n - email \n - password \n - number \n \n Other elements like <strong>&lt;input></strong>: \n - <strong>&lt;textarea></strong> = multiline text \n - <strong>&lt;select></strong> with <strong>&lt;option></strong>= Dropdown menu \n \n Of course, a form is only really usefull when you can send everything with a <strong>&lt;button> ...<strong>&lt;/button></strong> - we'll learn how to send it later, but for now let's create the button. The button must also be given a type so that it knows what to do later when it is pressed. \n\n",
    "example": "<!DOCTYPE html> \n <html> \n  <head> \n   <title> This is the title! </title> \n  </head> \n  <body> \n   <form> \n    <label for = 'name'> Name </label> \n    <input type = 'text' id = 'name' name = 'username'/> \n    <button type = 'submit'> Send </button> \n   </form> \n  </body> \n </html>"
  },
  {
    "id": 7,
    "course_id": 1,
    "title": "Links",
    "content": "HTML Links (Hyperlinks) are words or buttons having a link to another page that take the user to that linked page when clicked. \n A hyperlink is a specific type of link that allows users to navigate from one web page or resource to another by clicking on it. You can create hyperlinks using text or images available on a webpage. A hyperlink is created using the HTML Anchor Tag (&lt/a>). \n\n <strong>The Anchor (&lta>) Tag</strong> \n An anchor tag, or &lta> tag, is a basic element that creates hyperlinks between two pages. Anything which is written between the opening &lta> and the closing &lt/a> tags become clickable and when someone clicks on it, the linked page will be opened. \n\n <strong>Creating Hyperlinks (Linking Webpages/Documents) </strong> \n You can link other webpages or documents by creating the hyperlinking to specific words, images, or any HTML element. \n As discussed above, you can create hyperlinks by using the HTML &lta> tag with the href attribute. The href attribute specifies the page/document to be linked. \n\n <strong>The 'target' Attribute</strong> \n The target attribute specifies the location where linked document is opened. \n\n Following are the possible values of target attribute: \n <li><strong>_blank</strong> - Opens the linked document in a new window or tab. <li><strong>_self</strong> - Opens the linked document in the same frame. <li><strong>_parent</strong> - Opens the linked document in the parent frame. <li><strong>_top</strong> - Opens the linked document in the full body of the window. <li><strong>targetframe</strong> - Opens the linked document in a named targetframe. \n\n <strong>Creating Image Links</strong> \n To create an HTML image link, we need an &ltimg> tag and an anchor element. The image element is used to display the image on the web page, and the anchor element is used to specify the destination URL of the link. \n Here, the href attribute of &lta> element contains the destination link and src attribute of &ltimg> tag contains the path of image. \n\n",
    "example": "<!DOCTYPE html> \n<html> \n<head> \n   <title>Hyperlink Example</title> \n</head> \n<body> \n   <p>Click following link</p> \n   <a href='https://www.tutorialspoint.com/' target='_self'>Tutorials Point</a> \n\n   <a href=' destination URL'> \n   <img src='image URL' alt='alternative text'> \n</a> \n</body> \n</html>"
  },
  {
    "id": 8,
    "course_id": 1,
    "title": "FINAL: HTML",
    "content": "Now you know the basics of HTML and it's time to put theory into practice! \n \n Take on the final task. ",
    "example": ""
  },
  {
    "id": 9,
    "course_id": 2,
    "title": "CSS Basics",
    "content": "Now we know the basics of HTML. Great ... the shell of our house is finished. Now it's time to furnish it ... we're learning CSS! \n CSS stands for Cascading Style Sheets and is used to design HTML elements: Colours, spacing, fonts, etc. \n \n How to use: \n 1. Inline: directly inside the tag (not recommended!): \n &lt;p style='color: red;'>Text&lt;/p> \n  2. In the &lt;style> tag within &lt;head>: \n &lt;style> p { color: red; } &lt;/style> \n  3. In an external `.css` file. \n \n Selectors \n Within the CSS, you must first define what you want to style in the HTML. We have to choose the selectors. To do this, you have the option of selecting the element, the class or the ID. \n \n If you select the <strong>element</strong>, all elements of this type on the website will be customised according to the specifications. <strong>Classes and IDs</strong> are specified by us - when writing the HTML. We can give individual elements the same class in order to style them uniformly. IDs are only used for a specific element. You cannot give an element an ID that has already been applied. \n \n In html we name the elements with class=‘className’ or id=‘idName’ in the respective tag. In CSS, the classes are displayed with a dot `.className {..}` and IDs with a hashtag `#idName {..}` \n \n Once we have defined the selector, we enter the values we need in the {} to style it the way we want. We will learn an overview of possible properties in the coming lessons. \n\n",
    "example": "<head> \n <title> This is the title! </title> \n</head> \n\n<style> \n h1 \n  {font-size: 24px;}\n\n .intro \n  {color: red;} \n\n #outro \n  {background-color: green} \n</style> \n\n<body> \n <h1> Best heading ever! </h1> \n <p class = 'intro' > This is the intro paragraph! </p> \n <p id = 'outro' > This is the outro paragraph! </p> \n</body> \n"
  },
  {
    "id": 10,
    "course_id": 2,
    "title": "Box-Model",
    "content": "In CSS, every HTML element is treated as a rectangular box, and the box model describes how the size of that box is calculated and how its parts interact. \n\n The box model consists of four main parts (from inside out): \n\n <strong>content</strong>: The actual text or image inside the element. \n <strong>padding</strong>:  The space between the content and the border. It pushes the border outward. \n <strong>border</strong>: The frame around the padding (or content, if there's no padding). \n <strong>margin</strong>: The space outside the border, used to separate elements from each other.  \n\n",
    "example": "div \n {padding: 30px; \n border: 5px dotted red; \n margin: 50px}"
  },
  {
    "id": 11,
    "course_id": 2,
    "title": "Flexbox",
    "content": "Flexbox (short for Flexible Box Layout) is a CSS layout module that makes it easier to arrange elements within a container dynamically and efficiently - both in rows and columns. It was developed to solve problems with the alignment and distribution of space in containers. \n \n Basic principles: \n Flexbox consists of two levels: \n 1. <strong>flex container</strong> - the element on which display: flex is set \n 2. <strong>flex items</strong> - the direct children of this container \n \n Most important features: \n For flex container: \n - '<strong>display: flex</strong>' Makes an element to an flex container \n - '<strong>flex-direction</strong>' directions of the axis : row (default), column, row-reverse, column-reverse \n - '<strong>justify-content</strong>' Distribution along the main axis (z. B. flex-start, center, - space-between, space-around, space-evenly) \n - '<strong>align-items</strong>' Distribution along the cross axis (z. B. stretch, flex-start, center, baseline) \n - '<strong>flex-wrap</strong>' line break: nowrap (Standard), wrap, wrap-reverse \n - '<strong>gap</strong>' Space between items \n \n For flex items: \n - '<strong>flex-grow</strong>' How much an item can grow if space is available \n - '<strong>flex-shrink</strong>' How much an item an item can shrink if space isn't available \n - '<strong>flex-basis</strong>' Size at the beginning(auto, 0, 100px esc.) \n - '<strong>flex</strong>' Shortcut: flex-grow flex-shrink flex-basis (flex: 1 0 200px) \n - '<strong>align-self</strong>' Overwright align-items just for this item \n \n When do I use flexbox? \n - If you want to align elements in a single row or column \n - For buttons in a bar, cards next to each other, navigations, centring \n - If you need responsive behaviour without a lot of media queries \n\n",
    "example": ".container \n {display: flex; \n justify-content: space-between; \n align-items: center} \n\n.item \n {flex: 1; margin: 10px;}"
  },
  {
    "id": 12,
    "course_id": 2,
    "title": "Media queries",
    "content": "Responsive design means that websites or web applications are designed in such a way that they automatically adapt to different screen sizes and devices - whether smartphone, tablet, laptop or large desktop screen. \n \n Goal: \n The user interface (UI) should look good and be usable everywhere without having to zoom or scroll to recognise content or operate buttons. \n \n Important principles: \n \n Flexible layouts (fluid grids): \n - Instead of fixed pixel values, relative units such as em, % or vw/vh are used. \n - Example: Instead of width: 600px, use width: 80%. \n \n Flexible images and media: \n - Images and videos adapt to the width of their container. \n - Example: img { max-width: 100%; height: auto; } \n \n Media queries (CSS): \n - This allows you to define styles specifically for certain screen sizes or devices. \n \n Mobile first approach: \n - You first develop for small screens and then expand for larger screens. \n - Advantage: better performance and better user-friendliness on mobile devices. \n\n",
    "example": "@media (max-width: 600px) {body {background-color: lightyellow;}}"
  },
  {
    "id": 13,
    "course_id": 2,
    "title": "FINAL: CSS",
    "content": "You now have everything you need to build a small website! \n\n Plan the structure: \n - title and headings \n - text \n - images \n - links \n - lists \n - forms  \n  \n Style it with CSS: \n - colors, distances \n - flexbox for layout \n - media query for the mobile version \n\n",
    "example": ""
  },
  {
    "id": 14,
    "course_id": 1,
    "title": "",
    "content": "",
    "example": ""
  }
]
